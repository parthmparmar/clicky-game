{"version":3,"sources":["images/baby_yoda.jpg","images/batman.jpg","images/captain_america.jpg","images/hulk.jpg","images/iorn_man.jpg","images/spider_man.jpg","images/storm.jpg","images/subzero.jpg","images/superman.jpg","images/venom.jpg","images/wolverine.jpg","images/wonder_woman.jpg","images/index.js","components/TopBar/index.js","components/jumbotron/index.js","pages/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","imageArray","name","image","require","TopBar","props","className","msg","score","topScore","Jumbotron","Game","state","clickedArray","Score","playGame","shuffledArray","randomizeArray","checkArray","setState","newArray","concat","newScore","newtopScore","topScoreCheck","includes","array","slice","i","length","j","Math","floor","random","this","map","item","key","src","onClick","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.920acde9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/baby_yoda.fa1b0be8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/batman.640d3f99.jpg\";","module.exports = __webpack_public_path__ + \"static/media/captain_america.89c4fa2f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hulk.156484dc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/iorn_man.6ad21feb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/spider_man.c6b9716b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/storm.b9a5a4fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/subzero.ee512b86.jpg\";","module.exports = __webpack_public_path__ + \"static/media/superman.5a78bb12.jpg\";","module.exports = __webpack_public_path__ + \"static/media/venom.124d942f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wolverine.0a4af948.jpg\";","module.exports = __webpack_public_path__ + \"static/media/wonder_woman.6cdcd3bd.jpg\";","\nconst babyYodaImg = require(\"./baby_yoda.jpg\");\nconst batmanImg = require(\"./batman.jpg\");\nconst captainAmericaImg = require(\"./captain_america.jpg\");\nconst hulkImg = require(\"./hulk.jpg\");\nconst ironmanImg = require(\"./iorn_man.jpg\");\nconst spidermanImg = require(\"./spider_man.jpg\");\nconst stormImg = require(\"./storm.jpg\");\nconst subzeroImg = require(\"./subzero.jpg\");\nconst supermanImg = require(\"./superman.jpg\");\nconst venomImg = require(\"./venom.jpg\");\nconst wolverineImg = require(\"./wolverine.jpg\");\nconst wonderWomanImg = require(\"./wonder_woman.jpg\");\n\nexport const imageArray = [\n    {\n        name: \"babyYoda\",\n        image: babyYodaImg\n    },\n    {\n        name: \"batman\",\n        image: batmanImg\n    },\n    {\n        name: \"captainAmerica\",\n        image: captainAmericaImg\n    },\n    {\n        name: \"hulk\",\n        image: hulkImg\n    },\n    {\n        name: \"ironMan\",\n        image: ironmanImg\n    },\n    {\n        name: \"spiderman\",\n        image: spidermanImg\n    },\n    {\n        name: \"storm\",\n        image: stormImg\n    },\n    {\n        name: \"subzero\",\n        image: subzeroImg\n    },\n    {\n        name: \"superman\",\n        image: supermanImg\n    },\n    {\n        name: \"venom\",\n        image: venomImg\n    },\n    {\n        name: \"wolverine\",\n        image: wolverineImg\n    },\n    {\n        name: \"wonder_woman\",\n        image: wonderWomanImg\n    },\n\n]\n","import React from \"react\";\n\nfunction TopBar(props) {\n    return (\n        <div className = \"top-bar mt-3 mb-4\">\n            <div className =\"row\">\n                <div className =\"col-md-4\">\n                    <h4>Clicky Game</h4>\n                </div>\n                <div className =\"col-md-4\">\n                    <h4>{props.msg}</h4>\n                </div>\n                <div className =\"col-md-4\">\n                    <h4>Your Score: {props.score} | Your Top Score: {props.topScore}</h4>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TopBar;","import React from \"react\";\n\nfunction Jumbotron() {\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Superhero Clicky Game</h1>\n                <p className=\"lead\">How good is you memory?  Good enough to be a Superhero or a Superfan?</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport { imageArray } from \"../../images\"\nimport TopBar from \"../../components/TopBar\";\nimport Jumbotron from \"../../components/jumbotron\";\nclass Game extends Component {\n    // setting our global state\n    state = {\n        imageArray: imageArray,\n        clickedArray: [],\n        Score: 0,\n        topScore: 0,\n        msg: \"Click an Image to Play Game!\"\n    };\n\n    componentDidMount() {\n        const shuffledArray = this.randomizeArray();\n        this.setState({\n            imageArray: shuffledArray,\n        });\n    }\n\n    playGame = name => {\n        \n        const shuffledArray = this.randomizeArray();\n\n        if (this.checkArray(name) == true) {\n            this.setState({\n                imageArray: shuffledArray,\n                Score: 0,\n                clickedArray: [],\n                msg: \"You Guessed Incorrectly!\"\n            })\n        }\n        else {\n            var newArray = this.state.clickedArray.concat(name)\n            var newScore = this.state.Score + 1\n            var newtopScore = this.topScoreCheck(newScore)\n            this.setState({\n                imageArray: shuffledArray,\n                clickedArray: newArray,\n                Score: newScore,\n                topScore: newtopScore,\n                msg: \"You Guessed Correctly!\"\n            });\n        };\n    };\n\n    checkArray = name => {\n        return (this.state.clickedArray.includes(name) ? true : false)\n    };\n\n    topScoreCheck = (newScore) => {\n        if (newScore > this.state.topScore){\n            return newScore\n        }\n        else {\n            return this.state.topScore\n        };\n    };\n\n    randomizeArray = () => {\n        var array = this.state.imageArray.slice();\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar score={this.state.Score} topScore = {this.state.topScore} msg = {this.state.msg}/>\n                <Jumbotron />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {this.state.imageArray.map(item => {\n                            return (\n                                <div className=\"col-md-2\">\n                                    <img key={item.name} className=\"img-fluid p-2 mt-3\" src={item.image} onClick={() => this.playGame(item.name)} alt=\"superhero\" />\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from './pages/Game/Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}